@page "{id}/Tokens/{authorizationId?}"
@using System.Collections.Immutable
@using Microsoft.AspNetCore.Authorization
@using OpenIddict.Abstractions
@using OpenIddict.Core
@using OpenIddict.EntityFrameworkCore.Models
@using PageModel = Microsoft.AspNetCore.Mvc.RazorPages.PageModel
@model TokenList

<section>
    <div class="container">

        <div class="row">
            <div class="col-lg-12 text-center">
                <partial name="_StatusMessage" for="@Model.StatusMessage"/>
            </div>
        </div>

        <div class="row">
            <div class="col-lg-12 text-center">
                <h2 class="section-heading">@Model.Application.DisplayName Tokens</h2>
                <hr class="primary">
            </div>
        </div>

        <div class="row">
            <div class="col-md-1">
                <div asp-validation-summary="All" class="text-danger"></div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-12">
                <table class="table table-sm table-responsive-md">
                    <thead>
                    <tr>
                        <th>Subject</th>
                        <th>Status</th>
                        <th>Type</th>
                        <th>CreationDate</th>
                        <th>ExpirationDate</th>
                        <th class="text-right">Actions</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var token in Model.Tokens)
                    {
                        <tr>
                            <td>@token.Subject</td>
                            <td>@token.Status</td>
                            <td>@token.Type</td>
                            <td>@token.CreationDate</td>
                            <td>@token.ExpirationDate</td>
                            <td class="text-right">
                                <a asp-page="./RevokeToken" asp-route-id="@token.Id">Revoke</a>
                            </td>
                        </tr>
                    }
                    @if (!Model.Tokens.Any())
                    {
                        <tr>
                            <td colspan="6">No Tokens</td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</section>


@functions{

    [Authorize]
    public class TokenList : PageModel
    {
        private readonly OpenIddictTokenManager<OpenIddictToken> _tokenManager;
        private readonly OpenIddictApplicationManager<OpenIddictApplication> _applicationManager;

        [BindProperty(SupportsGet = true)]
        public string StatusMessage { get; set; }

        [BindProperty(SupportsGet = true)]
        public string Id { get; set; }
        [BindProperty(SupportsGet = true)]
        public string AuthorizationId { get; set; }

        public ImmutableArray<OpenIddictToken> Tokens { get; internal set; }
        public OpenIddictApplication Application { get; internal set; }

        public TokenList(OpenIddictTokenManager<OpenIddictToken> tokenManager, OpenIddictApplicationManager<OpenIddictApplication> applicationManager)
        {
            _tokenManager = tokenManager;
            _applicationManager = applicationManager;
        }

        public async Task<IActionResult> OnGetAsync()
        {
            
            Application = await _applicationManager.FindByIdAsync(Id);
            if (string.IsNullOrEmpty(AuthorizationId))
            {
                Tokens = await _tokenManager.FindByApplicationIdAsync(Id);
            }
            else
            {
                Tokens = await _tokenManager.FindByAuthorizationIdAsync(AuthorizationId);
            }
            
            return Page();
        }
    }

}
