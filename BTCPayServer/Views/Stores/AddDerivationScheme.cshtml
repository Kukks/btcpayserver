@model DerivationSchemeViewModel
@{
    Layout = "../Shared/_NavLayout.cshtml";
    ViewData.SetActivePageAndTitle(StoreNavPages.Index, $"{Model.CryptoCode} Derivation scheme");
}

<partial name="_StatusMessage" for="StatusMessage" />
<h4>@ViewData["Title"]</h4>

<div class="row">
    <div class="col-md-6">
        <div asp-validation-summary="All" class="text-danger"></div>
    </div>
</div>
<div class="row">
    <div class="col-md-8">
        <partial name="AddDerivationSchemes_HardwareWalletDialogs" model="@Model"/>  
    
        <form method="post">
            @if (!Model.Confirmation)
            {
                <div class="form-group">
                    <h5>Derivation Scheme</h5>
                    <span>The DerivationScheme represents the destination of the funds received by your invoice. It is generated by your wallet software. Please, verify that you are generating the right addresses by clicking on 'Check ExtPubKey'</span>
                </div>
                <input id="CryptoCurrency" asp-for="CryptoCode" type="hidden" />
                <input id="KeyPath" asp-for="KeyPath" type="hidden" />
                <input id="Source" asp-for="Source" type="hidden" />
                <input id="RootFingerprint" asp-for="RootFingerprint" type="hidden" />
                <input id="AccountKey" asp-for="AccountKey" type="hidden" />
                <input id="Config" asp-for="Config" type="hidden" />
                <div class="form-group">
                    <label asp-for="DerivationScheme"></label>
                    <input asp-for="DerivationScheme" class="form-control" />
                    <span asp-validation-for="DerivationScheme" class="text-danger"></span>
                    
                    <div class="dropdown mt-2">
                        <button class="btn btn-primary dropdown-toggle" type="button" id="hardwarewlletimportdropdown" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            Import from hardware device
                        </button>
                        <div class="dropdown-menu" aria-labelledby="hardwarewlletimportdropdown">
                            <button class="dropdown-item" type="button" data-toggle="modal" data-target="#coldcardimport">Coldcard</button>
                            <button class="dropdown-item  check-for-ledger" data-toggle="modal" data-target="#ledgerimport" type="button">Ledger</button>
                            <button class="dropdown-item check-for-trezor" type="button" data-toggle="modal" data-target="#trezorimport">Trezor</button>
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <span>BTCPay format memo</span>
                    <table class="table table-sm table-responsive-md">
                        <thead>
                            <tr>
                                <th>Address type</th>
                                <th>Example</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>P2WPKH</td>
                                <td>xpub...</td>
                            </tr>
                            <tr>
                                <td>P2SH-P2WPKH</td>
                                <td>xpub...-[p2sh]</td>
                            </tr>
                            <tr>
                                <td>P2PKH</td>
                                <td>xpub...-[legacy]</td>
                            </tr>
                            <tr>
                                <td>Multi-sig P2WSH</td>
                                <td>2-of-xpub1...-xpub2...</td>
                            </tr>
                            <tr>
                                <td>Multi-sig P2SH-P2WSH</td>
                                <td>2-of-xpub1...-xpub2...-[p2sh]</td>
                            </tr>
                            <tr>
                                <td>Multi-sig P2SH</td>
                                <td>2-of-xpub1...-xpub2...-[legacy]</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <div class="form-group">
                    <label asp-for="Enabled"></label>
                    <input asp-for="Enabled" type="checkbox" class="form-check" />
                </div>
                <button name="command" type="submit" class="btn btn-primary" value="save" id="Continue">Continue</button>
            }
            else
            {
                <div class="form-group">
                    <h5>Confirm the addresses (@Model.CryptoCode)</h5>
                    <span>Please check that your @Model.CryptoCode wallet is generating the same addresses as below.</span>
                </div>
                <input type="hidden" asp-for="Confirmation" />
                <input id="KeyPath" asp-for="KeyPath" type="hidden" />
                <input id="Source" asp-for="Source" type="hidden" />
                <input id="RootFingerprint" asp-for="RootFingerprint" type="hidden" />
                <input id="AccountKey" asp-for="AccountKey" type="hidden" />
                <input type="hidden" asp-for="DerivationScheme" />
                <input type="hidden" asp-for="Enabled" />
                <input id="Config" asp-for="Config" type="hidden" />
                <div class="form-group">
                    <table class="table table-sm table-responsive-md">
                        <thead>
                            <tr>
                                <th>Key path</th>
                                <th>Address</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var sample in Model.AddressSamples)
                            {
                                <tr>
                                    <td>@sample.KeyPath</td>
                                    <td>@sample.Address</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <div class="form-group">
                    <h5>Wrong addresses?</h5>
                    <span>Help us to find the correct settings by telling us the first address of your wallet</span>
                </div>
                <div class="form-group">
                    <label asp-for="HintAddress"></label>
                    <input asp-for="HintAddress" class="form-control" />
                    <span asp-validation-for="HintAddress" class="text-danger"></span>
                </div>
                <button name="command" type="submit" class="btn btn-primary" value="save" id="Confirm">Confirm</button>
            }
        </form>
    </div>
</div>



@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")
    <script src="~/js/ledgerwebsocket.js" type="text/javascript" defer="defer"></script>
    <script src="~/js/StoreAddDerivationScheme.js" type="text/javascript" defer="defer"></script>

    <script src="~/vendor/trezor/trezor.js-umd.js"></script>
    <script src="~/js/trezor/trezor-client.js" type="text/javascript" defer="defer"></script>

    <script>


        $(document).ready(function() {
            var trezorInit = false;
            $(".check-for-trezor").on("click",
                function() {
                    if (!trezorInit) {
                        trezorClient.init();
                        trezorInit = true;
                    }
                });
            $("[data-trezorkeypath]").on("click",
                function() {
                    var keypath = $(this).data("trezorkeypath");
                    var keys = keypath.split("/");
                    if (trezorDevice != null) {
                        var hardeningConstant = 0x80000000;

                        trezorDevice.waitForSessionAndRun(function(session) {
                                debugger;
                                var path = [];
                                for (var i = 0; i < keys.length; i++) {
                                    var key = keys[i];

                                    if (keys[i].endsWith("'")) {
                                        key = key.substring(0, key.length - 1);
                                        path.push((parseInt(key) | hardeningConstant) >>> 0);
                                        continue;
                                    }

                                    path.push(parseInt(key));
                                }
                                
                                return session.getHDNode(path, @Model.Network.DisplayName);
                            })
                            .then(function(hdNode) {
                                console.warn("HDNODe", arguments);

                                $("#RootFingerprint").val(hdNode.parentFingerprint);
                                $("#KeyPath").val(keys[keys.length - 1]);
                                $("#DerivationScheme").val(hdNode.toBase58()+  "-[p2sh]");
//Seems like Trezor does not allow you to select anything else for their own ui. They tell you to use electrum for native segwit: https://wiki.trezor.io/Bech32
                                debugger;
                                $("#trezor-submit").submit();
                            });
                    }

                });
        });

        function onTrezorDeviceFound(device) {
            $(".display-when-trezor-connected").show();
            
        }
    </script>
}
